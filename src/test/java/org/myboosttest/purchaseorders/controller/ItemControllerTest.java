package org.myboosttest.purchaseorders.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.myboosttest.purchaseorders.dto.request.ItemRequest;
import org.myboosttest.purchaseorders.dto.response.ItemResponse;
import org.myboosttest.purchaseorders.service.ItemService;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@ExtendWith(MockitoExtension.class)
public class ItemControllerTest {

    private MockMvc mockMvc;

    @Mock
    private ItemService itemService;

    @InjectMocks
    private ItemController itemController;

    private ObjectMapper objectMapper;

    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
        mockMvc = MockMvcBuilders.standaloneSetup(itemController).build();
    }

    // Test for creating an item
    @Test
    void testCreateItem() throws Exception {
        // Create a valid ItemRequest
        ItemRequest itemRequest = new ItemRequest(
                null,  // id will be generated by the service
                "Item Name",
                "Item Desc",
                100,
                30,
                "admin",  // Optional
                "admin"   // Optional
        );

        // Mock the service method to return an item ID
        when(itemService.createItem(any(ItemRequest.class))).thenReturn(1);

        mockMvc.perform(post("/api/v1/items")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(itemRequest)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.status").value("success"))
                .andExpect(jsonPath("$.message").value(contains("Item created successfully")))
                .andExpect(jsonPath("$.message").value(contains("ID: 1")));

        verify(itemService, times(1)).createItem(any(ItemRequest.class));
    }

    // Test for finding all items
    @Test
    void testFindAll() throws Exception {
        ItemResponse itemResponse1 = new ItemResponse(1, "Item 1", "Desc 1",100, 20);
        ItemResponse itemResponse2 = new ItemResponse(2, "Item 2", "Desc 2",150, 30);
        List<ItemResponse> items = Arrays.asList(itemResponse1, itemResponse2);

        when(itemService.findAllItem()).thenReturn(items);

        mockMvc.perform(get("/api/v1/items")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(1))
                .andExpect(jsonPath("$[0].name").value("Item 1"))
                .andExpect(jsonPath("$[1].id").value(2))
                .andExpect(jsonPath("$[1].name").value("Item 2"));

        verify(itemService, times(1)).findAllItem();
    }

    // Test for finding an item by ID
    @Test
    void testFindById() throws Exception {
        ItemResponse itemResponse = new ItemResponse(1, "Item 1", "Desc 1",100, 20);
        when(itemService.findById(1)).thenReturn(itemResponse);

        mockMvc.perform(get("/api/v1/items/{item-id}", 1)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.name").value("Item 1"));

        verify(itemService, times(1)).findById(1);
    }

    // Test for updating an item
    @Test
    void testUpdateItem() throws Exception {
        ItemRequest itemRequest = new ItemRequest(
                1,  // id should be included for update
                "Updated Item",
                "Updated Description",
                120,
                40,
                "admin",
                "admin"
        );

        doNothing().when(itemService).updateItem(any(ItemRequest.class)); // Mock the service method

        mockMvc.perform(put("/api/v1/items")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(itemRequest)))
                .andExpect(status().isAccepted());

        verify(itemService, times(1)).updateItem(any(ItemRequest.class));
    }

    // Test for deleting an item
    @Test
    void testDeleteItem() throws Exception {
        doNothing().when(itemService).deleteItem(1); // Mock the deleteItem method

        mockMvc.perform(delete("/api/v1/items/{item-id}", 1)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().string("Item with ID:: 1 has been deleted"));

        verify(itemService, times(1)).deleteItem(1);
    }

    // Test for validation of ItemRequest when required fields are missing
    @Test
    void testCreateItemValidation() throws Exception {
        // Create an ItemRequest with missing required fields (name and description)
        ItemRequest itemRequest = new ItemRequest(
                null,
                null, // Missing name
                null, // Missing description
                100,
                30,
                "admin",
                "admin"
        );

        mockMvc.perform(post("/api/v1/items")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(itemRequest)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.errors[0].field").value("name"))
                .andExpect(jsonPath("$.errors[0].message").value("Name is required"))
                .andExpect(jsonPath("$.errors[1].field").value("description"))
                .andExpect(jsonPath("$.errors[1].message").value("Description is required"));

        verify(itemService, times(0)).createItem(any(ItemRequest.class));
    }
}
